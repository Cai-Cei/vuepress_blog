{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{408:function(t,a,s){\"use strict\";s.r(a);var r=s(56),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"c-学习笔记\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#c-学习笔记\"}},[t._v(\"#\")]),t._v(\" C++学习笔记\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"深拷贝与浅拷贝\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#深拷贝与浅拷贝\"}},[t._v(\"#\")]),t._v(\" 深拷贝与浅拷贝\")]),t._v(\" \"),s(\"p\",[t._v(\"浅拷贝：简单的赋值拷贝操作\")]),t._v(\" \"),s(\"p\",[t._v(\"深拷贝：在堆区\")]),t._v(\" \"),s(\"p\",[t._v(\"如果有属性在堆区开辟，一定要自己提供拷贝构造函数，防止浅拷贝对堆区重复释放\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"初始化列表\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#初始化列表\"}},[t._v(\"#\")]),t._v(\" 初始化列表\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-c++ extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"public:\\n\\tPerson():m_A(10),m_B(20),m_C(30){};\\n\\t//Person(int a,int b,int c):m_A(a),m_B(b),m_C(c){};\\n\")])])]),s(\"h4\",{attrs:{id:\"类对象作为类成员\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类对象作为类成员\"}},[t._v(\"#\")]),t._v(\" 类对象作为类成员\")]),t._v(\" \"),s(\"p\",[t._v(\"构造时先构造类对象，再构造自身\")]),t._v(\" \"),s(\"p\",[t._v(\"析构时先析构自身，在析构类对象\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"静态成员函数\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态成员函数\"}},[t._v(\"#\")]),t._v(\" 静态成员函数\")]),t._v(\" \"),s(\"p\",[t._v(\"所有对象共享同一个函数\")]),t._v(\" \"),s(\"p\",[t._v(\"静态成员函数只能访问静态成员变量\")]),t._v(\" \"),s(\"p\",[t._v(\"可以通过类名访问\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"成员变量与成员函数分开存储\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#成员变量与成员函数分开存储\"}},[t._v(\"#\")]),t._v(\" 成员变量与成员函数分开存储\")]),t._v(\" \"),s(\"p\",[t._v(\"只有非静态成员\"),s(\"strong\",[t._v(\"变量\")]),t._v(\"才属于类的对象上\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"this指针\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#this指针\"}},[t._v(\"#\")]),t._v(\" this指针\")]),t._v(\" \"),s(\"p\",[t._v(\"本质是个指针常量，指向是不可修改的\")]),t._v(\" \"),s(\"p\",[t._v(\"this指针指向被调用的成员函数所属对象，无需定义\")]),t._v(\" \"),s(\"p\",[t._v(\"用途：区分同名的形参和成员变量、在类的非静态成员函数中返回对象本身，可使用\"),s(\"code\",[t._v(\"return *this\")])]),t._v(\" \"),s(\"p\",[t._v(\"const修饰成员函数叫常函数，常函数内不可以修改成员属性，成员属性声明时加关键字mutable后，在常函数中依然可以修改。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"void showPerson() const{}\\n\")])])]),s(\"p\",[t._v(\"常对象只能调用常函数\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"友元\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#友元\"}},[t._v(\"#\")]),t._v(\" 友元\")]),t._v(\" \"),s(\"p\",[t._v(\"友元的目的是让另一个函数或者类，访问私有成员\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"friend void test(Person *person)\\n\")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}